/*
 * src/components/GoalForm.tsx
 * Form for creating and editing goals, now includes template availability.
 */
// Imports remain largely the same, add TemplateAvailabilityGrid
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import React, { useState, useEffect } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css'; // Styles for date picker
import { parseISO, format as formatFn, isBefore, startOfDay, isValid as isValidDate } from 'date-fns';
import { Goal } from '../types';
import { useAppContext } from '../contexts/AppContext';
import { v4 as uuidv4 } from 'uuid';
import { TemplateAvailabilityGrid } from './TemplateAvailabilityGrid'; // Import the new component

interface GoalFormProps {
  goalToEdit?: Goal | null;
  onClose: () => void; // Function to close the form/modal
}

// Update FormValues to include the template
interface FormValues {
  title: string;
  description: string;
  startDate: Date | null;
  endDate: Date | null;
  templateAvailability: Record<number, number[]>; // Template state
}

export const GoalForm: React.FC<GoalFormProps> = ({ goalToEdit, onClose }) => {
  const { dispatch } = useAppContext();

  const parseDateSafe = (dateStr: string | undefined): Date | null => {
      if (!dateStr) return null;
      try {
          const parsed = parseISO(dateStr);
          return isValidDate(parsed) ? startOfDay(parsed) : null;
      } catch {
          return null;
      }
  };

  // Initialize templateAvailability, ensuring all days 0-6 exist
  const initialTemplate = goalToEdit?.templateAvailability || {};
  for (let i = 0; i <= 6; i++) {
      if (!initialTemplate[i]) {
          initialTemplate[i] = [];
      }
  }

  const initialValues: FormValues = {
    title: goalToEdit?.title || '',
    description: goalToEdit?.description || '',
    startDate: goalToEdit ? parseDateSafe(goalToEdit.startDate) : startOfDay(new Date()),
    endDate: goalToEdit ? parseDateSafe(goalToEdit.endDate) : startOfDay(new Date()),
    templateAvailability: initialTemplate, // Initialize from goal or empty
  };

  const validate = (values: FormValues) => {
    const errors: Partial<Omit<FormValues, 'startDate' | 'endDate'> & { startDate?: string; endDate?: string }> = {};
    if (!values.title) {
      errors.title = 'Title is required';
    } else if (values.title.length > 50) {
      errors.title = 'Title cannot exceed 50 characters';
    }
     if (values.description && values.description.length > 500) {
        errors.description = 'Description cannot exceed 500 characters';
    }
    if (!values.startDate) {
      errors.startDate = 'Start date is required';
    } else if (!isValidDate(values.startDate)) {
       errors.startDate = 'Invalid start date';
    }
    if (!values.endDate) {
      errors.endDate = 'End date is required';
    } else if (!isValidDate(values.endDate)) {
        errors.endDate = 'Invalid end date';
    }

    if (values.startDate && values.endDate && isValidDate(values.startDate) && isValidDate(values.endDate) && isBefore(values.endDate, values.startDate)) {
      errors.endDate = 'End date cannot be before start date';
    }
    return errors;
  };

  const handleSubmit = (values: FormValues) => {
    if (!values.startDate || !values.endDate || !isValidDate(values.startDate) || !isValidDate(values.endDate)) {
        console.error("Attempted to submit goal with invalid dates.");
        return;
    }

    // Filter out days with no hours selected from template before saving
    const cleanTemplate: Record<number, number[]> = {};
    Object.entries(values.templateAvailability).forEach(([day, hours]) => {
        if (hours.length > 0) {
            cleanTemplate[parseInt(day, 10)] = hours;
        }
    });

    const goalData: Goal = {
      id: goalToEdit?.id || uuidv4(),
      title: values.title.trim(),
      description: values.description?.trim(),
      startDate: formatFn(values.startDate, 'yyyy-MM-dd'),
      endDate: formatFn(values.endDate, 'yyyy-MM-dd'),
      templateAvailability: cleanTemplate, // Save the cleaned template
      // Availability will be generated by the reducer using the template
      availability: goalToEdit?.availability || [], // Pass existing for potential merging logic (though current reducer overwrites)
      plans: goalToEdit?.plans || {},
      accomplishments: goalToEdit?.accomplishments || {},
    };

    // Dispatch UPDATE or ADD action. The reducer will handle applying the template.
    if (goalToEdit) {
      dispatch({ type: 'UPDATE_GOAL', payload: goalData });
    } else {
      dispatch({ type: 'ADD_GOAL', payload: goalData });
      // Set the new goal as active immediately after creation
      dispatch({ type: 'SET_ACTIVE_GOAL', payload: { id: goalData.id } });
    }
    onClose(); // Close the form
  };

  return (
    <Formik initialValues={initialValues} validate={validate} onSubmit={handleSubmit} enableReinitialize>
        {({ setFieldValue, errors, touched, values, isSubmitting }) => (
          <Form className="p-6 bg-white dark:bg-slate-800 rounded-lg shadow-md space-y-6"> {/* Increased spacing */}
            <h2 className="text-2xl font-bold mb-4 text-slate-800 dark:text-slate-200">
              {goalToEdit ? 'Edit Goal' : 'Create New Goal'}
            </h2>

            {/* Basic Goal Details */}
            <div className="space-y-4">
                {/* Title Field */}
                <div>
                  <label htmlFor="goal-title" className="block text-sm font-medium text-slate-700 dark:text-slate-300">Title</label>
                  <Field
                    id="goal-title" name="title" type="text" maxLength="50"
                    className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${errors.title && touched.title ? 'border-red-500' : 'border-slate-300 dark:border-slate-600'} bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100`}
                    aria-required="true" aria-invalid={!!(errors.title && touched.title)} aria-describedby="title-error"
                  />
                  <ErrorMessage name="title" component="div" id="title-error" className="text-red-500 text-xs mt-1" />
                </div>
                {/* Description Field */}
                <div>
                  <label htmlFor="goal-description" className="block text-sm font-medium text-slate-700 dark:text-slate-300">Description (Optional)</label>
                  <Field
                    id="goal-description" name="description" as="textarea" maxLength="500" rows="3"
                    className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm resize-none ${errors.description && touched.description ? 'border-red-500' : 'border-slate-300 dark:border-slate-600'} bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100`}
                    aria-invalid={!!(errors.description && touched.description)} aria-describedby="description-error"
                  />
                   <ErrorMessage name="description" component="div" id="description-error" className="text-red-500 text-xs mt-1" />
                </div>
                {/* Date Pickers */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="startDate" className="block text-sm font-medium text-slate-700 dark:text-slate-300">Start Date</label>
                    <DatePicker
                      id="startDate" selected={values.startDate}
                      onChange={(date: Date | null) => {
                          setFieldValue('startDate', date ? startOfDay(date) : null);
                          if (date && values.endDate && isBefore(values.endDate, date)) {
                              setFieldValue('endDate', date ? startOfDay(date) : null);
                          }
                      }}
                      selectsStart startDate={values.startDate} endDate={values.endDate}
                      dateFormat="yyyy-MM-dd" placeholderText="Select start date"
                      className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${errors.startDate && touched.startDate ? 'border-red-500' : 'border-slate-300 dark:border-slate-600'} bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100`}
                       aria-required="true" aria-invalid={!!(errors.startDate && touched.startDate)} aria-describedby="startDate-error"
                    />
                    <ErrorMessage name="startDate" component="div" id="startDate-error" className="text-red-500 text-xs mt-1" />
                  </div>
                  <div>
                    <label htmlFor="endDate" className="block text-sm font-medium text-slate-700 dark:text-slate-300">End Date</label>
                    <DatePicker
                      id="endDate" selected={values.endDate}
                      onChange={(date: Date | null) => setFieldValue('endDate', date ? startOfDay(date) : null)}
                      selectsEnd startDate={values.startDate} endDate={values.endDate}
                      minDate={values.startDate || new Date()} dateFormat="yyyy-MM-dd" placeholderText="Select end date"
                       className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${errors.endDate && touched.endDate ? 'border-red-500' : 'border-slate-300 dark:border-slate-600'} bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100`}
                        aria-required="true" aria-invalid={!!(errors.endDate && touched.endDate)} aria-describedby="endDate-error"
                    />
                    <ErrorMessage name="endDate" component="div" id="endDate-error" className="text-red-500 text-xs mt-1" />
                  </div>
                </div>
            </div>

            {/* Template Availability Section */}
            <div className="pt-4 border-t border-slate-200 dark:border-slate-700">
                <h3 className="text-lg font-semibold mb-2 text-slate-800 dark:text-slate-200">Default Weekly Availability</h3>
                <p className="text-sm text-slate-600 dark:text-slate-400 mb-4">
                    Set your typical available hours for each day of the week. This template will be applied to all weeks within the goal's date range. You can override specific days later.
                </p>
                <TemplateAvailabilityGrid
                    templateAvailability={values.templateAvailability}
                    onHourToggle={(dayOfWeek, hour) => {
                        const currentHours = values.templateAvailability[dayOfWeek] || [];
                        const isSelected = currentHours.includes(hour);
                        const newHours = isSelected
                            ? currentHours.filter(h => h !== hour)
                            : [...currentHours, hour].sort((a, b) => a - b);
                        setFieldValue(`templateAvailability.${dayOfWeek}`, newHours);
                    }}
                />
            </div>

            {/* Action Buttons */}
            <div className="flex justify-end space-x-3 pt-6">
              <button
                type="button" onClick={onClose}
                className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-md text-sm font-medium text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500"
              >
                Cancel
              </button>
              <button
                type="submit" disabled={isSubmitting}
                className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isSubmitting ? 'Saving...' : (goalToEdit ? 'Save Changes' : 'Create Goal')}
              </button>
            </div>
          </Form>
        )}
    </Formik>
  );
};